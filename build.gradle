buildscript {
    repositories {
        mavenLocal()
        maven {url 'https://repo.grails.org/grails/core'}
    }
    dependencies {
        classpath "org.grails:grails-gradle-plugin:$grailsGradlePluginVersion"
        classpath "org.grails.plugins:hibernate5:7.2.0"
    }
}

version xhAppVersion
group xhAppPackage

apply plugin:'idea'
apply plugin:'war'
apply plugin:'org.grails.grails-web'

repositories {
    mavenLocal()
    mavenCentral()
    maven {url 'https://repo.grails.org/grails/core'}
    maven {url 'https://repo.xh.io/content/groups/public/'}
}

configurations {
    all {
        resolutionStrategy.cacheChangingModulesFor 0, 'seconds'
    }
}

springBoot {
    mainClass = xhAppPackage + ".Application"
}

boolean inlineHoist = runHoistInline == 'true'
if (inlineHoist) {
    println "${xhAppName}: running with Hoist Core INLINE...."
    grails.plugins {
        implementation project(":hoist-core")
    }
} else {
    println "${xhAppName}: running with Hoist Core PACKAGED at v${hoistCoreVersion}...."
    dependencies {
        implementation "io.xh:hoist-core:$hoistCoreVersion"
    }
}

dependencies {
    implementation "org.bitbucket.b_c:jose4j:0.7.9"
    runtimeOnly "mysql:mysql-connector-java:8.0.27"

    if (useSpringDevTools) {
        runtimeOnly(
            "org.springframework.boot:spring-boot-devtools",
            "io.methvin:directory-watcher:0.15.0"
        )
    }
}

// Avoid unexpected errors with overly-long classpath on Windows development machines.
grails {
    pathingJar = true
}

Map hoistMetaData = [
    'info.xh.appCode': xhAppCode,
    'info.xh.appName': xhAppName,
    'info.xh.appPackage': xhAppPackage,
    'info.xh.appBuild': findProperty('xhAppBuild') ?: 'UNKNOWN'
]

def allJvmArgs = [
        '-Dspring.output.ansi.enabled=always',
        '-XX:TieredStopAtLevel=1',
        '-Xmx1024m'
]

bootRun {
    ignoreExitValue true
    systemProperties System.properties
    jvmArgs(allJvmArgs)
    sourceResources sourceSets.main
    systemProperties hoistMetaData
}

tasks.withType(GroovyCompile) {
    configure(groovyOptions) {
        forkOptions.jvmArgs = allJvmArgs
    }
}


//--------------------------------------------------
// Extensions to build.info (Hoist-Core requirement)
//--------------------------------------------------
buildProperties.doLast {
    File grailsBuildInfoFile = it.outputs.files.files.find { it.name == 'grails.build.info' }
    if (!grailsBuildInfoFile) return

    Properties properties = new Properties()
    grailsBuildInfoFile.withInputStream {properties.load(it)}
    properties.putAll(hoistMetaData)
    grailsBuildInfoFile.withOutputStream {properties.store(it, null)}
}
