buildscript {
    repositories {
        mavenLocal()
        mavenCentral()
        maven {url 'https://repo.grails.org/grails/core'}
    }
    dependencies {
        classpath "org.grails:grails-gradle-plugin:$grailsVersion"
        classpath "org.grails.plugins:hibernate5:7.0.0"
    }
}

// Custom props sourced from gradle.properties
def appCode = xhAppCode,
    appName = xhAppName,
    appVersion = xhAppVersion,
    appBuild = findProperty('xhAppBuild') ?: 'UNKNOWN'

version appVersion
group 'io.xh'

apply plugin:'idea'
apply plugin:'war'
apply plugin:'org.grails.grails-web'

repositories {
    mavenLocal()
    mavenCentral()
    maven {url 'https://repo.grails.org/grails/core'}
    maven {url 'https://repo.xh.io/content/groups/public/'}
}

configurations.all {
    resolutionStrategy.cacheChangingModulesFor 0, 'seconds'
}

configurations {
    developmentOnly
    runtimeClasspath {
        extendsFrom developmentOnly
    }
}

boolean inlineHoist = runHoistInline == 'true'
if (inlineHoist) {
    println "${appName}: running with Hoist Core INLINE...."
} else {
    println "${appName}: running with Hoist Core PACKAGED at v${hoistCoreVersion}...."
}

dependencies {

    // Java 11 dev time support - full spring-boot reload of entire app
    developmentOnly "org.springframework.boot:spring-boot-devtools"

    // Java 8 dev time support --see https://github.com/grails/grails-core/pull/11441
    // agent "org.springframework:springloaded:1.2.8.RELEASE"
    // runtimeOnly "io.methvin:directory-watcher:0.9.6"

    // Grails 4.0.6 REST Defaults
    compile "org.springframework.boot:spring-boot-starter-logging"
    compile "org.springframework.boot:spring-boot-autoconfigure"
    compile "org.grails:grails-core"
    compile "org.springframework.boot:spring-boot-starter-actuator"
    compile "org.springframework.boot:spring-boot-starter-tomcat"
    compile "org.grails:grails-plugin-url-mappings"
    compile "org.grails:grails-plugin-rest"
    compile "org.grails:grails-plugin-codecs"
    compile "org.grails:grails-plugin-interceptors"
    compile "org.grails:grails-plugin-services"
    compile "org.grails:grails-plugin-datasource"
    compile "org.grails:grails-plugin-databinding"
    compile "org.grails:grails-web-boot"
    compile "org.grails:grails-logging"
    compile "org.grails.plugins:async"
    compile "org.grails.plugins:events"
    compile "org.grails.plugins:hibernate5"
    compileOnly "io.micronaut:micronaut-inject-groovy"
    console "org.grails:grails-console"
    profile "org.grails.profiles:rest-api"
    runtime "com.h2database:h2"
    runtime "org.apache.tomcat:tomcat-jdbc"

    // For JWT token validation.
    compile "org.bitbucket.b_c:jose4j:0.7.2"

    // Toolbox additions/Changes
    compile "org.hibernate:hibernate-core:5.4.27.Final"
    compile "org.hibernate:hibernate-ehcache:5.4.27.Final"
    compile "net.sf.ehcache:ehcache:2.10.6"
    compile "org.springframework:spring-websocket"
    runtime "mysql:mysql-connector-java:5.1.47"

    if (!inlineHoist) {
        // Include Hoist as versioned external dependency when building a WAR for release
        compile "io.xh:hoist-core:$hoistCoreVersion"
    }
}

// Avoid unexpected errors with overly-long classpath on Windows development machines.
grails {
    pathingJar = true
}

if (inlineHoist) {
    // Include Hoist as an inline plugin in multi-project mode when running in development
    grails {
        plugins {
            compile project(":hoist-core")
        }
    }
}

// Tasks to create distribution bundles that include built client-assets, as well as (for the
// first task) the WAR. This creates a self-contained archive with both sides of the build output.
// NOTE - these rely on the client-side build having been completed (outside of Gradle) by Yarn and
// Webpack. A future project could be to orchestrate the Webpack build from within Gradle as well.
apply plugin:'distribution'
distributions {
    appWarAndClientAssets {
        contents {
            into ('client-assets') {
                from ('client-app/build')
            }
            into ('war') {
                from war.outputs.files
            }
        }
    }
    clientAssets {
        contents {
            from { 'client-app/build' }
        }
    }
}

apply plugin:'maven-publish'
publishing {
    publications {
        // Classic Maven publication of the Grails server WAR only (with fully spec'd POM file).
        appWar(MavenPublication) {
            from components.java
            artifactId appCode
            artifact war
        }
        // TAR distro with both the Grails WAR + client-side assets.
        appWarAndClientAssets(MavenPublication) {
            artifactId appCode + '-all'
            artifact appWarAndClientAssetsDistTar
        }
        // TAR distro with client-side assets only.
        clientAssets(MavenPublication) {
            artifactId appCode + '-client-assets'
            artifact clientAssetsDistTar
        }
    }
    repositories {
        maven {
            def repoEndpoint = version.endsWith('-SNAPSHOT') ? 'snapshots' : 'releases'
            url "https://repo.xh.io/content/repositories/$repoEndpoint/"
            credentials {
                username project.findProperty('xhRepoDeployUser')
                password project.findProperty('xhRepoDeployPassword')
            }
        }
    }
}

Map hoistMetaData = [
        'info.xh.appCode': appCode,
        'info.xh.appName': appName,
        'info.xh.appBuild': appBuild
]


def allJvmArgs = [
        '-Dspring.output.ansi.enabled=always',
        '-noverify',
        '-XX:TieredStopAtLevel=1',
        '-Xmx1024m'
]
// Prevent reflection warning: See https://dev.to/erichelgeson/removing-illegal-reflective-access-warnings-in-grails-4-393o
allJvmArgs += [
        "java.management/com.sun.jmx.mbeanserver", "java.base/java.io", "java.base/java.lang", "java.base/java.lang.annotation",
        "java.base/java.lang.invoke", "java.base/java.lang.module", "java.base/java.lang.ref", "java.base/java.lang.reflect",
        "java.base/java.math", "java.base/java.net", "java.base/java.net.spi", "java.base/java.nio", "java.base/java.nio.channels",
        "java.base/java.nio.channels.spi", "java.base/java.nio.charset", "java.base/java.nio.charset.spi", "java.base/java.nio.file",
        "java.base/java.nio.file.attribute", "java.base/java.nio.file.spi", "java.base/java.security", "java.base/java.security.acl",
        "java.base/java.security.cert", "java.base/java.security.interfaces", "java.base/java.security.spec", "java.base/java.text",
        "java.base/java.text.spi", "java.base/java.time", "java.base/java.time.chrono", "java.base/java.time.format",
        "java.base/java.time.temporal", "java.base/java.time.zone", "java.base/java.util", "java.base/java.util.concurrent",
        "java.base/java.util.concurrent.atomic", "java.base/java.util.concurrent.locks", "java.base/java.util.function",
        "java.base/java.util.jar", "java.base/java.util.regex", "java.base/java.util.spi", "java.base/java.util.stream",
        "java.base/java.util.zip", "java.datatransfer/java.awt.datatransfer", "java.desktop/java.applet", "java.desktop/java.awt",
        "java.desktop/java.awt.color", "java.desktop/java.awt.desktop", "java.desktop/java.awt.dnd", "java.desktop/java.awt.dnd.peer",
        "java.desktop/java.awt.event", "java.desktop/java.awt.font", "java.desktop/java.awt.geom", "java.desktop/java.awt.im",
        "java.desktop/java.awt.im.spi", "java.desktop/java.awt.image", "java.desktop/java.awt.image.renderable",
        "java.desktop/java.awt.peer", "java.desktop/java.awt.print", "java.desktop/java.beans", "java.desktop/java.beans.beancontext",
        "java.instrument/java.lang.instrument", "java.logging/java.util.logging", "java.management/java.lang.management",
        "java.prefs/java.util.prefs", "java.rmi/java.rmi", "java.rmi/java.rmi.activation", "java.rmi/java.rmi.dgc",
        "java.rmi/java.rmi.registry", "java.rmi/java.rmi.server", "java.sql/java.sql"
].collect {"--add-opens=$it=ALL-UNNAMED".toString()}

bootRun {
    ignoreExitValue true
    systemProperties System.properties
    jvmArgs(allJvmArgs)
    sourceResources sourceSets.main
    String springProfilesActive = 'spring.profiles.active'
    systemProperty springProfilesActive, System.getProperty(springProfilesActive)
    systemProperties hoistMetaData
}

tasks.withType(GroovyCompile) {
    configure(groovyOptions) {
        forkOptions.jvmArgs = allJvmArgs
    }
}


//--------------------------------------------------
// Extensions to build.info (Hoist-Core requirement)
//--------------------------------------------------
buildProperties.doLast {
    File grailsBuildInfoFile = it.outputs.files.files.find { it.name == 'grails.build.info' }
    if (!grailsBuildInfoFile) return

    Properties properties = new Properties()
    grailsBuildInfoFile.withInputStream {properties.load(it)}
    properties.putAll(hoistMetaData)
    grailsBuildInfoFile.withOutputStream {properties.store(it, null)}
}


//----------------------------
// Custom Tasks
//----------------------------
task publishAppWar(dependsOn: "publishAppWarPublicationToMavenRepository") {
    group 'xhio'
    description 'Publishes the built Grails server WAR to XH Nexus.'

    doLast {
        println "$appCode $version published to repo.xh.io!"
    }
}

task publishAppWarAndClientAssets(dependsOn: ["checkForClientAssets", "publishAppWarAndClientAssetsPublicationToMavenRepository"]) {
    group 'xhio'
    description 'Publishes a combined tarball with WAR and client assets to XH Nexus.'

    doLast {
        println "$appCode $version published to repo.xh.io!"
    }
}


task checkForClientAssets() {
    doFirst {
        def clientBuild = new File('client-app/build')
        if (!clientBuild.exists() || !clientBuild.listFiles().size()) {
            throw new RuntimeException('Client build directory not populated - has a webpack build been run (outside of Gradle)?')
        }
    }
}