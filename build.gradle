import static java.lang.Boolean.parseBoolean

buildscript {
    repositories {
        mavenCentral()
        maven {url 'https://repo.grails.org/grails/restricted'}
    }
    dependencies { // Not Published to Gradle Plugin Portal
        classpath platform("org.apache.grails:grails-bom:$grailsVersion")
        classpath "org.apache.grails:grails-data-hibernate5"
        classpath "org.apache.grails:grails-gradle-plugins"
    }
}

plugins {
    id "war"
    id "idea"
    id "java-library"
    id 'co.uzzu.dotenv.gradle' version '3.0.0'
}

// Not Published to Gradle Plugin Portal
apply plugin: "org.apache.grails.gradle.grails-web"

version xhAppVersion
group xhAppPackage

repositories {
    mavenCentral()
    maven {url = 'https://repo.grails.org/grails/restricted'}
    maven {url 'https://repo.xh.io/content/groups/public/'}
}

configurations {
    all {
        // Ensure any SNAPSHOT dependencies are always resolved to the latest available version.
        resolutionStrategy.cacheChangingModulesFor 0, 'seconds'
    }
}

springBoot {
    mainClass = xhAppPackage + ".Application"
}


def allJvmArgs = [
    '-Dspring.output.ansi.enabled=always',
    '-XX:TieredStopAtLevel=1',
    '-Xmx' + localDevXmx,
    "--add-modules=java.se",
    "--add-exports=java.base/jdk.internal.ref=ALL-UNNAMED",
    "--add-opens=java.base/java.lang=ALL-UNNAMED",
    "--add-opens=java.base/sun.nio.ch=ALL-UNNAMED",
    "--add-opens=java.management/sun.management=ALL-UNNAMED",
    "--add-opens=jdk.management/com.sun.management.internal=ALL-UNNAMED",
    "--add-opens=java.base/java.util=ALL-UNNAMED"
]

if (parseBoolean(enableHotSwap)) {

    // Enhance JVM args, including Groovy Reset as agent
    def groovyReset = configurations.detachedConfiguration(
        dependencies.create("io.xh:groovyReset:1.0")
    )
    allJvmArgs += [
        '-XX:HotswapAgent=fatjar',
        '-XX:+AllowEnhancedClassRedefinition',
        "-Dspring.devtools.restart.enabled=false",
        "-Dspring.devtools.livereload.enabled=false",
        "-javaagent:" + groovyReset.singleFile.absolutePath
    ]
}

dependencies {
    // If `runHoistInline` is true, `hoistCoreVersion` will be ignored and local hoist-core will be used instead.
    implementation "io.xh:hoist-core:$hoistCoreVersion"

    // For server-side JWT validation.
    implementation "org.bitbucket.b_c:jose4j:0.9.6"

    // Database drivers - H2 for temporary in-memory DB with `useH2: true` in instanceConfig YAML
    // MySQL for deployed instances, or more stateful local workstation setups.
    runtimeOnly "com.h2database:h2"
    runtimeOnly "mysql:mysql-connector-java:8.0.33"

    // Stifle dev errors on Macs
    developmentOnly "io.methvin:directory-watcher:0.19.1"
}

Map hoistMetaData = [
    'info.xh.appCode': xhAppCode,
    'info.xh.appName': xhAppName,
    'info.xh.appPackage': xhAppPackage,
    'info.xh.appBuild': findProperty('xhAppBuild') ?: 'UNKNOWN'
]


bootRun {
    ignoreExitValue true
    systemProperties System.properties
    jvmArgs(allJvmArgs)
    systemProperties hoistMetaData
    // Bring .env sourced environment variables into bootRun JVM process.
    environment env.allVariables()
}

tasks.withType(GroovyCompile) {
    configure(groovyOptions) {
        forkOptions.jvmArgs = allJvmArgs
    }
}


//--------------------------------------------------
// Extensions to build.info (Hoist-Core requirement)
//--------------------------------------------------
tasks.war.doFirst {
    File infoFile = layout.buildDirectory.file('resources/main/META-INF/grails.build.info').get().asFile
    Properties properties = new Properties()
    infoFile.withInputStream {properties.load(it)}
    properties.putAll(hoistMetaData)
    infoFile.withOutputStream {properties.store(it, null)}
}

// Ensure that all variables defined in .env.template are set in local .env
tasks.bootRun.doFirst {
    def missingEnvVars = env.allVariablesOrNull().findAll {it.value == null}.collect {it.key}
    if (missingEnvVars) {
        throw new GradleException("Environment variables listed in .env.template not set in local .env file as required: ${missingEnvVars}")
    }
}


